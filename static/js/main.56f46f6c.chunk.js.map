{"version":3,"sources":["components/TeamCheckbox/TeamCheckbox.js","components/Chart/Chart.js","App.js","serviceWorker.js","index.js"],"names":["TeamCheckbox","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","key","event","newTeams","state","teams","slice","isCheck","target","checked","setState","teams_name","teams_array","Array","from","sort","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","data","name","value","push","err","return","selectedTeams","filter","team","selectedTeamName","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","closeCheckbox","handleTeams","_this2","react_default","a","createElement","className","Button_default","variant","color","size","onClick","handleSubmit","FormGroup_default","map","FormControlLabel_default","control","Checkbox_default","onChange","label","Component","Chart","showVisitor","showHome","series","team_data","isVisitor","concat","toConsumableArray","Date","parse","date","score","options","title","text","subtitle","yAxis","xAxis","type","dateTimeLabelFormats","day","highcharts_react_min_default","highcharts","Highcharts","App","showCheckbox","input","showAlertBox","formatInputData","require","Map","item","visitor_team","home_team","has","set","visitor_data","home_data","get","names","input_data","sample_data","console","log","JSON","stringify","e","components_Chart_Chart","components_TeamCheckbox_TeamCheckbox","keys","toggleCheckbox","handleSelectTeam","Switch_default","handleSwitch","TextField_default","id","multiline","rows","rowsMax","margin","placeholder","generateSampleData","fullWidth","handleDataInput","disabled","Dialog_default","open","onClose","handleAlertBoxClose","aria-labelledby","aria-describedby","DialogTitle_default","DialogContent_default","DialogContentText_default","DialogActions_default","autoFocus","style","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.56f46f6c.chunk.js","sourcesContent":["import React, {Component} from 'react';\n// import {FormGroup} from '@material-ui/core/FormGroup';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Button from '@material-ui/core/Button';\nimport './TeamCheckbox.css';\n// import './App.css'\n// import data from '../data/csvjson.json';\nclass TeamCheckbox extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      teams:[],\n    }\n  }\n\n  componentDidMount(){\n    const teams_name = this.props.teams;\n    let teams_array = Array.from(teams_name).sort();\n    let teams = [];\n    for (let team of teams_array) {\n      const data = {\n        name: team,\n        isCheck: false\n      };\n      teams.push(data);\n    }\n    this.setState({teams});\n  }\n\n  handleSubmit(){\n    let selectedTeams = this.state.teams.filter(team => {\n      return team.isCheck===true\n    })     \n\n    let selectedTeamName = [];\n    for (let team of selectedTeams) {\n      selectedTeamName.push(team.name);\n    }\n    \n    this.props.closeCheckbox();\n    this.props.handleTeams(selectedTeamName);\n  }\n\n  handleChange = key => event => {\n    const newTeams = this.state.teams.slice();\n    newTeams[key].isCheck = event.target.checked;\n    this.setState({teams:newTeams})\n  };\n\n  render(){\n    const {teams} = this.state;\n    // console.log(teams);\n    return(\n      <div className='checkbox-wrapper'>\n        <div className='plot-buttom'>\n        <Button\n          variant=\"contained\" \n          color=\"primary\"\n          size='small'\n          onClick = {()=> this.handleSubmit()}\n        >\n          Plot\n        </Button>\n        </div>\n      <div className='view'>\n        <FormGroup>\n            {teams.map((team, key) => {\n              return(\n                  <div\n                    key={key}\n                  >\n                  <FormControlLabel                \n                      control={\n                        <Checkbox checked={team.isCheck} color='primary' onChange={this.handleChange(key)} value={team.name}/>\n                      }\n                      label={team.name}\n                  />\n                </div>\n              )              \n            })}\n        </FormGroup>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default TeamCheckbox;\n","import React from 'react'\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\n\n/* change marker to team logo\n\nconst nameMap = {\n    'Atlanta Hawks':'atl',\n    'Brooklyn Nets':'bkn',\n    'Boston Celtics':'bos',\n    'Charlotte Hornets':'cha',\n    'Chicago Bulls':'chi',\n    'Cleveland Cavaliers':'cle',\n    'Dallas Mavericks':'dal',\n    'Denver Nuggets':'den',\n    'Detroit Pistons':'det',\n    'Golden State Warriors':'gsw',\n    'Houston Rockets':'hou',\n    'Indiana Pacers':'ind',\n    'Los Angeles Clippers':'lac',\n    'Los Angeles Lakers':'lal',\n    'Memphis Grizzlies':'mem',\n    'Miami Heat':'mia',\n    'Milwaukee Bucks':'mil',\n    'Minnesota Timberwolves':'min',\n    'New Orleans Pelicans':'nop',\n    'New York Knicks':'nyk',\n    'Oklahoma City Thunder':'okc',\n    'Orlando Magic':'orl',\n    'Philadelphia 76ers':'phi',\n    'Phoenix Suns':'phx',\n    'Portland Trail Blazers':'por',\n    'Sacramento Kings':'sac',\n    'San Antonio Spurs':'sas',\n    'Toronto Raptors':'tor',\n    'Utah Jazz':'uta',\n    'Washington Wizards': 'was'\n}\n*/\nconst Chart = (props) => {\n    \n    const {selectedTeams, showVisitor, showHome} = props\n\n    let series = [];\n    for (let team of selectedTeams){\n    \n        let team_data = []\n        for (let data of team.data){\n            // filter Visitor/Home game\n            if (!showVisitor && !showHome) break;\n            else if (showVisitor&&!showHome){\n                if (!data.isVisitor) continue;\n            } else if (!showVisitor && showHome){\n                if (data.isVisitor) continue;\n            }\n\n            team_data = [\n                ...team_data,\n                [\n                    Date.parse(data.date),\n                    data.score\n                ]\n            ]\n        }\n        // console.log(\"team_data\", team_data);\n        series = [\n            ...series,\n            {\n                name: team.name,\n                data: team_data,\n                // marker:{\n                //     symbol:`url(https://www.nba.com/.element/img/1.0/teamsites/logos/teamlogos_500x500/${nameMap[team.name]}.png)`,\n                //     height:15,\n                //     width:15,\n                // }\n            }\n        ]\n    }\n\n    const options = {\n        title: {\n          text: 'NBA Season Explorer'\n        },\n        subtitle: {\n            text: 'A React Web App Created by Brandon Cao'\n        },\n        yAxis:{\n            title:{\n                text: \"Score\"\n            }\n        },\n        xAxis: {\n            title: {\n              text: \"Date\"\n            },\n            type:\"datetime\",\n            dateTimeLabelFormats: {\n                day: '%m/%d/%y',\n            },\n        },\n        series:series        \n      }\nreturn ( \n    <div>\n    <HighchartsReact\n        highcharts={Highcharts}\n        options={options}\n    />\n    </div>\n    )\n}\n\nexport default Chart;","import React, {Component} from 'react';\n// import {FormGroup} from '@material-ui/core/FormGroup';\nimport FormControl from '@material-ui/core/FormControl';\nimport Button from '@material-ui/core/Button';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch'\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nimport TeamCheckbox from './components/TeamCheckbox/TeamCheckbox';\nimport Chart from './components/Chart/Chart';\nimport './App.css'\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state={\n      showCheckbox:false,\n      teams:[],\n      selectedTeams:[],\n      showVisitor:true,\n      showHome: true,\n      input:\"\",\n      showAlertBox:false\n      \n      \n    }\n  }\n\n  componentDidMount(){\n    this.formatInputData();\n  }\n  \n  formatInputData(){\n    const data = require('./csvjson.json');\n    let teams = new Map();\n    for (let item of data) {\n      const visitor_team = item['Visitor/Neutral'];\n      const home_team = item['Home/Neutral'];\n      if (!teams.has(visitor_team)){\n        teams.set(visitor_team,[]);\n      }\n      if (!teams.has(home_team)) {\n        teams.set(home_team, []);\n      }\n\n      const visitor_data = {\n        date:item['Date'],\n        isVisitor: true,\n        score: item['PTS(Visitor)'],\n      }\n\n      const home_data = {\n        date: item['Date'],\n        isVisitor: false,\n        score: item['PTS(Home)'],\n      }\n\n      teams.set(visitor_team, teams.get(visitor_team).slice().concat(visitor_data));\n      teams.set(home_team, teams.get(home_team).slice().concat(home_data));\n    }\n      this.setState({teams});\n  }\n\n  toggleCheckbox() {\n    this.setState({\n      showCheckbox:  !this.state.showCheckbox\n    })\n  }\n\n  handleSelectTeam(names) {\n    let selectedTeams = [];\n    for (let name of names) {\n      const team = {\n        name: name,\n        data: this.state.teams.get(name),\n      }\n      selectedTeams.push(team);\n    }\n    this.setState({\n      selectedTeams\n    })\n  }\n\n  handleSwitch(type){\n    type === 'visitor'? \n    this.setState({\n      showVisitor:!this.state.showVisitor\n    })\n    :\n    this.setState({\n      showHome:!this.state.showHome\n    })\n  }\n\n  generateSampleData(){\n    // console.log(\"sample::\",this.state.teams.get(\"Golden State Warriors\"));\n    let input_data = [];\n    const sample_data = {\n      name:\"Golden State Warriors\",\n      data: this.state.teams.get(\"Golden State Warriors\")\n    }\n    input_data.push(sample_data)\n    \n    console.log(\"input_data\",input_data);\n    this.setState({\n      input: JSON.stringify(input_data)\n    })\n  }\n\n  handleDataInput(){\n    try {\n      JSON.parse(this.state.input);\n    } catch(e) {\n      this.setState({\n        showAlertBox:true\n      })\n      return;\n    }\n    this.setState({\n      selectedTeams: JSON.parse(this.state.input)\n    })\n  }\n\n  handleAlertBoxClose(){\n    this.setState({\n      showAlertBox:false\n    })\n  }\n\n  render(){\n    const {selectedTeams} = this.state;\n    const data_placeholder=`[\\n{\"name\":\"Golden State Warriors\",\"data\":[{\"date\":\"10/25/16\",\"isVisitor\":false,\"score\":100},{\"date\":\"10/29/16\",\"isVisitor\":true,\"score\":120}]},\\n{\"name\":\"Los Angeles Lakers\",\"data\":[{\"date\":\"11/1/16\",\"isVisitor\":true,\"score\":106},{\"date\":\"11/3/16\",\"isVisitor\":true,\"score\":118}]}\\n]`;\n    return(\n      <div className='app'>\n        <div className='chart'>\n            <Chart \n              selectedTeams = {selectedTeams}\n              showVisitor = {this.state.showVisitor}\n              showHome = {this.state.showHome}\n            />\n        </div>      \n        <div>\n        {\n          this.state.showCheckbox?\n          <div className='checkbox'>\n          <TeamCheckbox \n            teams={this.state.teams.keys()}\n            closeCheckbox = {()=>this.toggleCheckbox()}\n            handleTeams = {(teams) => this.handleSelectTeam(teams)}\n          />\n          </div>:null\n        }\n        \n          <div className='control-wrapper'>\n            <div className='control'>\n              {/* <FormGroup row> */}\n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={this.state.showVisitor}\n                    onChange={()=>this.handleSwitch('visitor')}\n                    color='primary'\n                    value=\"checkedVisitor\"\n                  />\n                }\n                label=\"Visitor\"\n              />\n               <FormControlLabel\n                control={\n                  <Switch\n                    checked={this.state.showHome}\n                    onChange={()=>this.handleSwitch('home')}\n                    color='primary'\n                    value=\"checkedHome\"\n                  />\n                }\n                label=\"Home\"\n              />\n            </div>\n            <div className='control'>\n            <Button \n              onClick={()=>this.toggleCheckbox()}\n              variant=\"contained\" \n              size='small'\n              color='primary'              \n              > Select Teams </Button>\n            </div>\n          </div>\n        </div>\n        <div className='input-wrapper'>\n          <TextField\n            id=\"outlined-multiline-flexible\"\n            label=\"Input Data\"\n            multiline\n            rows='8'\n            rowsMax=\"8\"\n            value={this.state.input}\n            onChange={(e)=>{this.setState({input:e.target.value})}}\n            margin=\"normal\"\n            placeholder={data_placeholder}\n            variant=\"outlined\"\n          />\n          <div className='input-button'>\n          <Button onClick={()=>this.generateSampleData()} \n                  variant='contained'\n                  size='small'\n                  fullWidth\n                  color='primary'\n                  >\n                  Sample Input\n          </Button>\n          </div>\n          <div className='input-button'>\n          <Button onClick={()=>this.handleDataInput()} \n                  variant='contained'\n                  disabled = {this.state.input === \"\" ? true : false}\n                  size='small'\n                  fullWidth\n                  color='primary'>\n                  Plot\n          </Button>\n          </div>\n        </div>\n        <div className='alert'>\n            <Dialog\n              open={this.state.showAlertBox}\n              onClose={()=>this.handleAlertBoxClose()}\n              aria-labelledby=\"alert-dialog-title\"\n              aria-describedby=\"alert-dialog-description\"\n            >\n              <DialogTitle id=\"alert-dialog-title\">{\"Incorrect input format\"}</DialogTitle>\n              <DialogContent>\n                <DialogContentText id=\"alert-dialog-description\">\n                  Try the sample data first!\n                </DialogContentText>\n              </DialogContent>\n              <DialogActions>\n                <Button onClick={()=>this.handleAlertBoxClose()} color=\"primary\" autoFocus style={{margin:'0 auto'}}>\n                  Got it!\n                </Button>\n              </DialogActions>\n            </Dialog>\n        </div>\n      </div>\n    )\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}